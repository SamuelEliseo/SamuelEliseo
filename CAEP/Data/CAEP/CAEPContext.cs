// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CAEP.Data.CAEP
{
    public partial class CAEPContext : DbContext
    {
        public CAEPContext()
        {
        }

        public CAEPContext(DbContextOptions<CAEPContext> options)
            : base(options)
        {
        }

        public virtual DbSet<PrAsigSemanasPresupuesto> PrAsigSemanasPresupuesto { get; set; }
        public virtual DbSet<PrAsignacionCcPresupuesto> PrAsignacionCcPresupuesto { get; set; }
        public virtual DbSet<PrAsignacionCcUsuarios> PrAsignacionCcUsuarios { get; set; }
        public virtual DbSet<PrAsignacionCuentasCc> PrAsignacionCuentasCc { get; set; }
        public virtual DbSet<PrAsignarCuentasAMaterialPrevio> PrAsignarCuentasAMaterialPrevio { get; set; }
        public virtual DbSet<PrAsignarEstacionBombas> PrAsignarEstacionBombas { get; set; }
        public virtual DbSet<PrAsignarMaterialesACuenta> PrAsignarMaterialesACuenta { get; set; }
        public virtual DbSet<PrAsignarMaterialesADf> PrAsignarMaterialesADf { get; set; }
        public virtual DbSet<PrCategoriaCuentas> PrCategoriaCuentas { get; set; }
        public virtual DbSet<PrCcUsuarioReporte> PrCcUsuarioReporte { get; set; }
        public virtual DbSet<PrCentrosDeCosto> PrCentrosDeCosto { get; set; }
        public virtual DbSet<PrConceptoDf> PrConceptoDf { get; set; }
        public virtual DbSet<PrCuentas> PrCuentas { get; set; }
        public virtual DbSet<PrDatosFincasEpDetalle> PrDatosFincasEpDetalle { get; set; }
        public virtual DbSet<PrDatosFincasTbDetalle> PrDatosFincasTbDetalle { get; set; }
        public virtual DbSet<PrDivisiones> PrDivisiones { get; set; }
        public virtual DbSet<PrEjecucionVsPresupuestado> PrEjecucionVsPresupuestado { get; set; }
        public virtual DbSet<PrEmpleados> PrEmpleados { get; set; }
        public virtual DbSet<PrEmpresas> PrEmpresas { get; set; }
        public virtual DbSet<PrFechaCanceContra> PrFechaCanceContra { get; set; }
        public virtual DbSet<PrGenero> PrGenero { get; set; }
        public virtual DbSet<PrHorasExtras> PrHorasExtras { get; set; }
        public virtual DbSet<PrMateriales> PrMateriales { get; set; }
        public virtual DbSet<PrMeses> PrMeses { get; set; }
        public virtual DbSet<PrMocAsignacionTp> PrMocAsignacionTp { get; set; }
        public virtual DbSet<PrMocAsignacionTpPres> PrMocAsignacionTpPres { get; set; }
        public virtual DbSet<PrMocIndicadores> PrMocIndicadores { get; set; }
        public virtual DbSet<PrMocMaestro> PrMocMaestro { get; set; }
        public virtual DbSet<PrNumeroEstacionBombas> PrNumeroEstacionBombas { get; set; }
        public virtual DbSet<PrPagoDinamico> PrPagoDinamico { get; set; }
        public virtual DbSet<PrParameBonificaciones> PrParameBonificaciones { get; set; }
        public virtual DbSet<PrParameDiasMoc> PrParameDiasMoc { get; set; }
        public virtual DbSet<PrParameterizacionDeduccionRemuneracion> PrParameterizacionDeduccionRemuneracion { get; set; }
        public virtual DbSet<PrParameterizacionDeduccionRemuneracionId> PrParameterizacionDeduccionRemuneracionId { get; set; }
        public virtual DbSet<PrParametrizacionLimite> PrParametrizacionLimite { get; set; }
        public virtual DbSet<PrParametrizacionMoc> PrParametrizacionMoc { get; set; }
        public virtual DbSet<PrParametrizacionValorDr> PrParametrizacionValorDr { get; set; }
        public virtual DbSet<PrParametrosSs> PrParametrosSs { get; set; }
        public virtual DbSet<PrPermisosUsuarios> PrPermisosUsuarios { get; set; }
        public virtual DbSet<PrPresupuestoMaestro> PrPresupuestoMaestro { get; set; }
        public virtual DbSet<PrPresupuestoSemanalDetalle> PrPresupuestoSemanalDetalle { get; set; }
        public virtual DbSet<PrPresupuestoSemanalDetalleD> PrPresupuestoSemanalDetalleD { get; set; }
        public virtual DbSet<PrPuestos> PrPuestos { get; set; }
        public virtual DbSet<PrRelaciones> PrRelaciones { get; set; }
        public virtual DbSet<PrSemanas> PrSemanas { get; set; }
        public virtual DbSet<PrSsPrestaciones> PrSsPrestaciones { get; set; }
        public virtual DbSet<PrSsPrestacionesDetalle> PrSsPrestacionesDetalle { get; set; }
        public virtual DbSet<PrSucursales> PrSucursales { get; set; }
        public virtual DbSet<PrSueldosYSalariosDetalle> PrSueldosYSalariosDetalle { get; set; }
        public virtual DbSet<PrTasaDeCambio> PrTasaDeCambio { get; set; }
        public virtual DbSet<PrTipoDeClase> PrTipoDeClase { get; set; }
        public virtual DbSet<PrTipoFinca> PrTipoFinca { get; set; }
        public virtual DbSet<PrTipoLibras> PrTipoLibras { get; set; }
        public virtual DbSet<PrTipoMaterial> PrTipoMaterial { get; set; }
        public virtual DbSet<PrTipoProceso> PrTipoProceso { get; set; }
        public virtual DbSet<PrTipoProcesoCategoria> PrTipoProcesoCategoria { get; set; }
        public virtual DbSet<PrTipoTasa> PrTipoTasa { get; set; }
        public virtual DbSet<PrTipoUsuario> PrTipoUsuario { get; set; }
        public virtual DbSet<PrTipoValor> PrTipoValor { get; set; }
        public virtual DbSet<PrTiposDePresupuestos> PrTiposDePresupuestos { get; set; }
        public virtual DbSet<PrUnidadMedida> PrUnidadMedida { get; set; }
        public virtual DbSet<PrUsuarios> PrUsuarios { get; set; }
        public virtual DbSet<PrVCentrosDeCosto> PrVCentrosDeCosto { get; set; }
        public virtual DbSet<PrVEmpresas> PrVEmpresas { get; set; }
        public virtual DbSet<PrValorBonificaciones> PrValorBonificaciones { get; set; }
        public virtual DbSet<TipoUbicaciones> TipoUbicaciones { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PrAsigSemanasPresupuesto>(entity =>
            {
                entity.HasIndex(e => new { e.IdSemana, e.IdPresupuesto })
                    .HasName("index_PR_ASIG_SEMANAS_PRESUPUESTO");

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrAsignacionCcPresupuesto>(entity =>
            {
                entity.HasComment("Tabla donde se asignan los tipos de presupuesto a los centros de costo");

                entity.HasIndex(e => new { e.IdCentroDeCosto, e.IdTipoPresupuesto })
                    .HasName("U_dbo_PR_ASIGNACION_CC_PRESUPUESTO_1")
                    .IsUnique();

                entity.Property(e => e.IdAsigCcPresupuesto).HasComment("Llave Primaria");

                entity.Property(e => e.IdCentroDeCosto).HasComment("llave Foranea de la Tabla Centros de Costo");

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrAsignacionCcPresupuesto)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .HasConstraintName("FK_PR_ASIGNACION_CC_PRESUPUESTO_PR_CENTROS_DE_COSTO");

                entity.HasOne(d => d.IdTipoPresupuestoNavigation)
                    .WithMany(p => p.PrAsignacionCcPresupuesto)
                    .HasForeignKey(d => d.IdTipoPresupuesto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_ASIGNACION_CC_PRESUPUESTO_PR_TIPOS_DE_PRESUPUESTOS");
            });

            modelBuilder.Entity<PrAsignacionCcUsuarios>(entity =>
            {
                entity.HasIndex(e => new { e.IdCentroDeCosto, e.IdUsuario })
                    .HasName("U_dbo_PR_ASIGNACION_CC_USUARIOS_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdUsuario, e.IdCentroDeCosto })
                    .HasName("IX_PR_ASIGNACION_CC_USUARIOS_D");

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrAsignacionCcUsuarios)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .HasConstraintName("FK_PR_ASIGNACION_CC_USUARIOS_PR_CENTROS_DE_COSTO");

                entity.HasOne(d => d.IdEmpresaNavigation)
                    .WithMany(p => p.PrAsignacionCcUsuarios)
                    .HasForeignKey(d => d.IdEmpresa)
                    .HasConstraintName("FK_PR_ASIGNACION_CC_USUARIOS_PR_EMPRESAS");
            });

            modelBuilder.Entity<PrAsignacionCuentasCc>(entity =>
            {
                entity.HasIndex(e => new { e.IdCentroDeCosto, e.IdCuenta })
                    .HasName("IX_PR_ASIGNACION_CUENTAS_CC")
                    .IsUnique();

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrAsignacionCuentasCc)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ASIGNAR_CUENTAS_CC_CENTROS_DE_COSTOS");

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.PrAsignacionCuentasCc)
                    .HasForeignKey(d => d.IdCuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_ASIGNACION_CUENTAS_CC_CUENTAS");
            });

            modelBuilder.Entity<PrAsignarCuentasAMaterialPrevio>(entity =>
            {
                entity.HasIndex(e => new { e.IdMaterial, e.IdCuenta })
                    .HasName("index_PR_ASIGNAR_CUENTAS_A_MATERIAL_PR_");

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.PrAsignarCuentasAMaterialPrevio)
                    .HasForeignKey(d => d.IdCuenta)
                    .HasConstraintName("FK_PR_ASIGNAR_CUENTAS_A_MATERIAL_PREVIO_PR_CUENTAS");

                entity.HasOne(d => d.IdMaterialNavigation)
                    .WithMany(p => p.PrAsignarCuentasAMaterialPrevio)
                    .HasForeignKey(d => d.IdMaterial)
                    .HasConstraintName("FK_PR_ASIGNAR_CUENTAS_A_MATERIAL_PREVIO_PR_MATERIALES");
            });

            modelBuilder.Entity<PrAsignarEstacionBombas>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdEstacionNavigation)
                    .WithMany(p => p.PrAsignarEstacionBombas)
                    .HasForeignKey(d => d.IdEstacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_ASIGNAR_ESTACION_BOMBAS_PR_NUMERO_ESTACION_BOMBAS");

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrAsignarEstacionBombas)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_ASIGNAR_ESTACION_BOMBAS_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrAsignarMaterialesACuenta>(entity =>
            {
                entity.HasKey(e => e.IdAsigMateCuenta)
                    .HasName("PK_ASIGNAR_MATERIALES_A_CUENTA");

                entity.HasIndex(e => new { e.IdCentroDeCosto, e.IdCuenta, e.IdMaterial })
                    .HasName("index_PR_ASIGNAR_MATERIALES_A_CUENTA");

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrAsignarMaterialesACuenta)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_CUENTA_PR_CENTROS_DE_COSTO");

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.PrAsignarMaterialesACuenta)
                    .HasForeignKey(d => d.IdCuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ASIGNAR_MATERIALES_A_CUENTA_CUENTAS1");

                entity.HasOne(d => d.IdMaterialNavigation)
                    .WithMany(p => p.PrAsignarMaterialesACuenta)
                    .HasForeignKey(d => d.IdMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_CUENTA_PR_MATERIALES");
            });

            modelBuilder.Entity<PrAsignarMaterialesADf>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrAsignarMaterialesADf)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_DF_PR_CENTROS_DE_COSTO");

                entity.HasOne(d => d.IdConceptoDfNavigation)
                    .WithMany(p => p.PrAsignarMaterialesADf)
                    .HasForeignKey(d => d.IdConceptoDf)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_DF_PR_CONCEPTO_DF");

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.PrAsignarMaterialesADf)
                    .HasForeignKey(d => d.IdCuenta)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_DF_PR_CUENTAS");

                entity.HasOne(d => d.IdMaterialNavigation)
                    .WithMany(p => p.PrAsignarMaterialesADf)
                    .HasForeignKey(d => d.IdMaterial)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_DF_PR_MATERIALES");

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrAsignarMaterialesADf)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_ASIGNAR_MATERIALES_A_DF_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrCategoriaCuentas>(entity =>
            {
                entity.Property(e => e.NombreCategoria).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrCcUsuarioReporte>(entity =>
            {
                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroCostoNavigation)
                    .WithMany(p => p.PrCcUsuarioReporte)
                    .HasForeignKey(d => d.IdCentroCosto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_CC_USUARIO_REPORTE_PR_CENTROS_DE_COSTO");
            });

            modelBuilder.Entity<PrCentrosDeCosto>(entity =>
            {
                entity.HasKey(e => e.IdCentroDeCosto)
                    .HasName("PK_CENTROS_DE_COSTOS");

                entity.HasIndex(e => e.CodCentroDeCosto)
                    .HasName("U_dbo_PR_CENTROS_DE_COSTO_1")
                    .IsUnique();

                entity.Property(e => e.AplicaGmsb).HasComment("Para calcular precio unitario de jefatura gmsb");

                entity.Property(e => e.CodCentroDeCosto).IsUnicode(false);

                entity.Property(e => e.Correo).IsUnicode(false);

                entity.Property(e => e.EsGmsb).HasComment("Para unir todos los centros de la finca GMSB");

                entity.Property(e => e.NombreCentroDeCosto).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdEmpresaNavigation)
                    .WithMany(p => p.PrCentrosDeCosto)
                    .HasForeignKey(d => d.IdEmpresa)
                    .HasConstraintName("FK_PR_CENTROS_DE_COSTO_PR_EMPRESAS");
            });

            modelBuilder.Entity<PrConceptoDf>(entity =>
            {
                entity.Property(e => e.Concepto).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.PrConceptoDf)
                    .HasForeignKey(d => d.IdCuenta)
                    .HasConstraintName("FK_PR_CONCEPTO_DF_PR_CUENTAS");
            });

            modelBuilder.Entity<PrCuentas>(entity =>
            {
                entity.HasKey(e => e.IdCuenta)
                    .HasName("PK_CUENTAS");

                entity.Property(e => e.CodCuenta).IsUnicode(false);

                entity.Property(e => e.NombreCuenta).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaNavigation)
                    .WithMany(p => p.PrCuentas)
                    .HasForeignKey(d => d.IdCategoria)
                    .HasConstraintName("FK_PR_CUENTAS_PR_CATEGORIA_CUENTAS");
            });

            modelBuilder.Entity<PrDatosFincasEpDetalle>(entity =>
            {
                entity.HasKey(e => e.IdDetalleDatoEp)
                    .HasName("PK_DETALLE_DATOS_FINCAS_EP");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrDatosFincasEpDetalle)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_DATOS_FINCAS_EP_DETALLE_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdSemanaNavigation)
                    .WithMany(p => p.PrDatosFincasEpDetalle)
                    .HasForeignKey(d => d.IdSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DETALLE_DATOS_FINCAS_EP_SEMANAS");

                entity.HasOne(d => d.IdTipoFincaNavigation)
                    .WithMany(p => p.PrDatosFincasEpDetalle)
                    .HasForeignKey(d => d.IdTipoFinca)
                    .HasConstraintName("FK_PR_DATOS_FINCAS_EP_DETALLE_PR_TIPO_FINCA");
            });

            modelBuilder.Entity<PrDatosFincasTbDetalle>(entity =>
            {
                entity.HasKey(e => e.IdDetalleDatoTb)
                    .HasName("PK_DETALLE_DATOS_FINCAS_TB");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdEstacionNavigation)
                    .WithMany(p => p.PrDatosFincasTbDetalle)
                    .HasForeignKey(d => d.IdEstacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DETALLE_DATOS_FINCAS_TB_NUMERO_ESTACION_BOMBAS");

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrDatosFincasTbDetalle)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_DATOS_FINCAS_TB_DETALLE_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdSemanaNavigation)
                    .WithMany(p => p.PrDatosFincasTbDetalle)
                    .HasForeignKey(d => d.IdSemana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DETALLE_DATOS_FINCAS_TB_SEMANAS");
            });

            modelBuilder.Entity<PrDivisiones>(entity =>
            {
                entity.HasKey(e => e.IdDivision)
                    .HasName("PK__DIVISION");

                entity.Property(e => e.CodDivision).IsUnicode(false);

                entity.Property(e => e.NombreDivision).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrEjecucionVsPresupuestado>(entity =>
            {
                entity.Property(e => e.CentroDeCosto).IsUnicode(false);

                entity.Property(e => e.CodCentroDeCosto).IsUnicode(false);

                entity.Property(e => e.CodCuenta).IsUnicode(false);

                entity.Property(e => e.Cuenta).IsUnicode(false);

                entity.Property(e => e.Justificacion).IsUnicode(false);

                entity.Property(e => e.JustificacionAcum).IsUnicode(false);

                entity.Property(e => e.NoombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrEmpleados>(entity =>
            {
                entity.HasKey(e => e.IdEmpleado)
                    .HasName("PK_PR_EMPLEADOS_DETALLE");

                entity.HasIndex(e => e.IdPresupuesto)
                    .HasName("DX_Index1");

                entity.HasIndex(e => new { e.IdPresupuesto, e.Puesto })
                    .HasName("dta_index_PR_EMPLEADOS");

                entity.HasIndex(e => new { e.RnpEmpleado, e.IdPresupuesto })
                    .HasName("U_dbo_PR_EMPLEADOS_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdPresupuesto, e.FormaPago, e.IdEmpleado })
                    .HasName("DX_Index2");

                entity.HasIndex(e => new { e.IdPresupuesto, e.IdEmpleado, e.Puesto })
                    .HasName("_dta_index_PR_EMPLEADOS");

                entity.Property(e => e.FormaPago).IsUnicode(false);

                entity.Property(e => e.Genero).IsUnicode(false);

                entity.Property(e => e.NombreEmpleado).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Puesto).IsUnicode(false);

                entity.Property(e => e.RnpEmpleado).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrEmpleados)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_EMPLEADOS_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdPuestoNavigation)
                    .WithMany(p => p.PrEmpleados)
                    .HasForeignKey(d => d.IdPuesto)
                    .HasConstraintName("FK_PR_EMPLEADOS_PR_PUESTOS");

                entity.HasOne(d => d.IdTipoClaseNavigation)
                    .WithMany(p => p.PrEmpleados)
                    .HasForeignKey(d => d.IdTipoClase)
                    .HasConstraintName("FK_PR_EMPLEADOS_PR_TIPO_DE_CLASE");
            });

            modelBuilder.Entity<PrEmpresas>(entity =>
            {
                entity.HasKey(e => e.IdEmpresa)
                    .HasName("PK__EMPRESAS");

                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.NombreEmpresa).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrFechaCanceContra>(entity =>
            {
                entity.Property(e => e.RnpEmpleado).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdEmpleadoNavigation)
                    .WithMany(p => p.PrFechaCanceContra)
                    .HasForeignKey(d => d.IdEmpleado)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_FECHA_CANCE_CONTRA_PR_EMPLEADOS");
            });

            modelBuilder.Entity<PrGenero>(entity =>
            {
                entity.HasKey(e => e.IdGenero)
                    .HasName("PK__GENERO");

                entity.Property(e => e.NombreGenero).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrHorasExtras>(entity =>
            {
                entity.HasKey(e => e.IdHoraExtra)
                    .HasName("PK_HORAS_EXTRAS");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrHorasExtras)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_HORAS_EXTRAS_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrMateriales>(entity =>
            {
                entity.HasKey(e => e.IdMaterial)
                    .HasName("PK_MATERIALES");

                entity.HasIndex(e => new { e.IdMaterial, e.NombreMaterial })
                    .HasName("Ix_PR_MATERIALES");

                entity.HasIndex(e => new { e.NombreMaterial, e.AfectaSemanal, e.IdMaterial })
                    .HasName("_dta_index_13");

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");

                entity.Property(e => e.CodigoMaterial).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.NombreMaterial).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdTipoMaterialNavigation)
                    .WithMany(p => p.PrMateriales)
                    .HasForeignKey(d => d.IdTipoMaterial)
                    .HasConstraintName("FK_PR_MATERIALES_PR_TIPO_MATERIAL");

                entity.HasOne(d => d.IdUnidadMedidaNavigation)
                    .WithMany(p => p.PrMateriales)
                    .HasForeignKey(d => d.IdUnidadMedida)
                    .HasConstraintName("FK_PR_MATERIALES_PR_UNIDAD_MEDIDA");
            });

            modelBuilder.Entity<PrMeses>(entity =>
            {
                entity.HasKey(e => e.IdMes)
                    .HasName("PK_MESES");

                entity.Property(e => e.NombreMes).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrMocAsignacionTp>(entity =>
            {
                entity.HasIndex(e => new { e.IdCentroDeCosto, e.IdTipoProceso })
                    .HasName("U_dbo_PR_MOC_ASIGNACION_TP_1")
                    .IsUnique();

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrMocAsignacionTp)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .HasConstraintName("FK_PR_MOC_ASIGNACION_TP_PR_CENTROS_DE_COSTO");

                entity.HasOne(d => d.IdTipoProcesoNavigation)
                    .WithMany(p => p.PrMocAsignacionTp)
                    .HasForeignKey(d => d.IdTipoProceso)
                    .HasConstraintName("FK_PR_MOC_ASIGNACION_TP_PR_TIPO_PROCESO");
            });

            modelBuilder.Entity<PrMocAsignacionTpPres>(entity =>
            {
                entity.HasIndex(e => new { e.IdPresupuesto, e.IdTipoProceso })
                    .HasName("U_dbo_PR_MOC_ASIGNACION_TP_PRES_1")
                    .IsUnique();

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrMocAsignacionTpPres)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_MOC_ASIGNACION_TP_PRES_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdTipoProcesoNavigation)
                    .WithMany(p => p.PrMocAsignacionTpPres)
                    .HasForeignKey(d => d.IdTipoProceso)
                    .HasConstraintName("FK_PR_MOC_ASIGNACION_TP_PRES_PR_TIPO_PROCESO");
            });

            modelBuilder.Entity<PrMocIndicadores>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrMocMaestro>(entity =>
            {
                entity.HasKey(e => e.IdMocMaestro)
                    .HasName("PK_DETALLE_PROCESOS_INDUSTRIALES_MOC_I");

                entity.HasIndex(e => new { e.DiasTrabajo, e.HorasPorDia, e.BinesPorDia, e.IdPresupuesto, e.IdTipoProceso, e.IdMes })
                    .HasName("index_PR_MOC_MAESTRO_2");

                entity.HasIndex(e => new { e.IdMocMaestro, e.Libras, e.Empleados, e.IdTipoProceso, e.IdPresupuesto, e.IdMes })
                    .HasName("index_PR_MOC_MAESTRO_1");

                entity.HasIndex(e => new { e.PedidosEspeciales, e.LibrasHoraMujerHombre, e.ValorPaquete, e.IdTipoProceso, e.IdPresupuesto, e.IdMes })
                    .HasName("index_PR_MOC_MAESTRO");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdMesNavigation)
                    .WithMany(p => p.PrMocMaestro)
                    .HasForeignKey(d => d.IdMes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DETALLE_PROCESOS_INDUSTRIALES_MOC_I_MESES");

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrMocMaestro)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_MOC_MAESTRO_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdTipoProcesoNavigation)
                    .WithMany(p => p.PrMocMaestro)
                    .HasForeignKey(d => d.IdTipoProceso)
                    .HasConstraintName("FK_PR_MOC_MAESTRO_PR_TIPO_PROCESO");
            });

            modelBuilder.Entity<PrNumeroEstacionBombas>(entity =>
            {
                entity.HasKey(e => e.IdEstacion)
                    .HasName("PK_NUMERO_ESTACION_BOMBAS");

                entity.Property(e => e.Estacion).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrPagoDinamico>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrParameBonificaciones>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrParameBonificaciones)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_PARAME_BONIFICACIONES_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrParameDiasMoc>(entity =>
            {
                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrParameterizacionDeduccionRemuneracion>(entity =>
            {
                entity.HasKey(e => e.IdParametro)
                    .HasName("PK_PARAMETERIZACION_DEDUCCION_REMUNERACION");

                entity.Property(e => e.NombreParametro).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrParameterizacionDeduccionRemuneracionId>(entity =>
            {
                entity.HasKey(e => e.IdParametroDr)
                    .HasName("PK_PARAMETERIZACION_DEDCCION_REMUNERACION_ID");

                entity.Property(e => e.NombreId).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.MesCalcularNavigation)
                    .WithMany(p => p.PrParameterizacionDeduccionRemuneracionId)
                    .HasForeignKey(d => d.MesCalcular)
                    .HasConstraintName("FK_PR_PARAMETERIZACION_DEDUCCION_REMUNERACION_ID_PR_MESES");
            });

            modelBuilder.Entity<PrParametrizacionLimite>(entity =>
            {
                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrParametrizacionMoc>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdMesNavigation)
                    .WithMany(p => p.PrParametrizacionMoc)
                    .HasForeignKey(d => d.IdMes)
                    .HasConstraintName("FK_PR_PARAMETRIZACION_MOC_PR_MESES");

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrParametrizacionMoc)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_PARAMETRIZACION_MOC_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdTipoLibraNavigation)
                    .WithMany(p => p.PrParametrizacionMoc)
                    .HasForeignKey(d => d.IdTipoLibra)
                    .HasConstraintName("FK_PR_PARAMETRIZACION_MOC_PR_TIPO_LIBRAS");

                entity.HasOne(d => d.IdTipoProcesoNavigation)
                    .WithMany(p => p.PrParametrizacionMoc)
                    .HasForeignKey(d => d.IdTipoProceso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_PARAMETRIZACION_MOC_PR_TIPO_PROCESO");
            });

            modelBuilder.Entity<PrParametrizacionValorDr>(entity =>
            {
                entity.HasIndex(e => new { e.PorcentajeIhss, e.IdPresupuesto })
                    .HasName("index_PR_PARAMETRIZACION_VALOR_DR");

                entity.HasIndex(e => new { e.Infop, e.ValorBono, e.IdPresupuesto })
                    .HasName("index_PR_PARAMETRIZACION_VALOR_DR_3");

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrParametrizacionValorDr)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_PARAMETRIZACION_VALOR_DR_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrParametrosSs>(entity =>
            {
                entity.Property(e => e.Concepto).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrPermisosUsuarios>(entity =>
            {
                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrPresupuestoMaestro>(entity =>
            {
                entity.Property(e => e.NumVersion).IsUnicode(false);

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.TiempoEjecucion).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCentroDeCostoNavigation)
                    .WithMany(p => p.PrPresupuestoMaestro)
                    .HasForeignKey(d => d.IdCentroDeCosto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_PRESUPUESTO_MAESTRO_PR_CENTROS_DE_COSTO");
            });

            modelBuilder.Entity<PrPresupuestoSemanalDetalle>(entity =>
            {
                entity.HasKey(e => e.IdDetallePresSemanal)
                    .HasName("PK_DETALLE_PRESUPUESTO_SEMANAL");

                entity.HasIndex(e => new { e.IdMaterial, e.IdPresupuesto, e.IdCuenta })
                    .HasName("_dta_index_14");

                entity.HasIndex(e => new { e.IdPresupuesto, e.IdCuenta, e.IdMaterial })
                    .HasName("IX_PR_PRESUPUESTO_SEMANAL_DETALLE")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdPresupuesto, e.IdDetallePresSemanal, e.IdMaterial, e.IdCuenta, e.PrecioUnitario })
                    .HasName("index_PR_PRESUPUESTO_SEMANAL_DETALLE");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.PrPresupuestoSemanalDetalle)
                    .HasForeignKey(d => d.IdCuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DETALLE_PRESUPUESTO_SEMANAL_CUENTAS");

                entity.HasOne(d => d.IdMaterialNavigation)
                    .WithMany(p => p.PrPresupuestoSemanalDetalle)
                    .HasForeignKey(d => d.IdMaterial)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_PRESUPUESTO_SEMANAL_DETALLE_PR_MATERIALES");

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrPresupuestoSemanalDetalle)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_PRESUPUESTO_SEMANAL_DETALLE_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrPresupuestoSemanalDetalleD>(entity =>
            {
                entity.HasKey(e => e.IdDetallePresSemanalD)
                    .HasName("PK_PR_PRES_SEML_D_D");

                entity.HasIndex(e => new { e.Cantidad, e.IdDetallePresSemanal })
                    .HasName("X_PR_PRESUPUESTO_SEMANAL_DETALLE_D");

                entity.HasIndex(e => new { e.Cantidad, e.IdDetallePresSemanal, e.IdDetallePresSemanalD, e.IdSemana })
                    .HasName("_dta_index_2");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdDetallePresSemanalNavigation)
                    .WithMany(p => p.PrPresupuestoSemanalDetalleD)
                    .HasForeignKey(d => d.IdDetallePresSemanal)
                    .HasConstraintName("FK_PR_PRESUPUESTO_SEMANAL_DETALLE_D_PR_PRESUPUESTO_SEMANAL_DETALLE");
            });

            modelBuilder.Entity<PrPuestos>(entity =>
            {
                entity.Property(e => e.Puesto).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrRelaciones>(entity =>
            {
                entity.HasKey(e => e.IdRelacion)
                    .HasName("PK_RELACIONES");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrRelaciones)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .HasConstraintName("FK_PR_RELACIONES_PR_PRESUPUESTO_MAESTRO");

                entity.HasOne(d => d.IdTipoFincaNavigation)
                    .WithMany(p => p.PrRelaciones)
                    .HasForeignKey(d => d.IdTipoFinca)
                    .HasConstraintName("FK_PR_RELACIONES_PR_TIPO_FINCA");
            });

            modelBuilder.Entity<PrSemanas>(entity =>
            {
                entity.HasKey(e => e.IdSemana)
                    .HasName("PK_SEMANAS");

                entity.Property(e => e.NombreSemana).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdMesNavigation)
                    .WithMany(p => p.PrSemanas)
                    .HasForeignKey(d => d.IdMes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SEMANAS_MESES");
            });

            modelBuilder.Entity<PrSsPrestaciones>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrSsPrestaciones)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_SS_PRESTACIONES_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<PrSsPrestacionesDetalle>(entity =>
            {
                entity.HasKey(e => e.IdPrestacionDetalle)
                    .HasName("PK__PR_SS_PR__AF1AC79300DF2177");

                entity.Property(e => e.RnpEmpleado).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPrestacionNavigation)
                    .WithMany(p => p.PrSsPrestacionesDetalle)
                    .HasForeignKey(d => d.IdPrestacion)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_SS_PRESTACIONES_DETALLE_PR_SS_PRESTACIONES");
            });

            modelBuilder.Entity<PrSucursales>(entity =>
            {
                entity.HasKey(e => e.IdSucursal)
                    .HasName("PK_PR_SUCURSAL");

                entity.Property(e => e.CodSucursal).IsUnicode(false);

                entity.Property(e => e.NombreSucursal).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrSueldosYSalariosDetalle>(entity =>
            {
                entity.HasKey(e => e.IdSueldoSalarioD)
                    .HasName("PK_PR_DETALLE_SUELDOS_Y_SALARIOS");

                entity.HasIndex(e => new { e.Enero, e.IdConcepto, e.IdEmpleado })
                    .HasName("_dta_index_5");

                entity.HasIndex(e => new { e.Abril, e.Septiembre, e.IdConcepto, e.IdEmpleado })
                    .HasName("ix_PR_SUELDOS_Y_SALARIOS_DETALLE_7_1");

                entity.HasIndex(e => new { e.Julio, e.Agosto, e.IdConcepto, e.IdEmpleado })
                    .HasName("ix_PR_SUELDOS_Y_SALARIOS_DETALLE_71");

                entity.HasIndex(e => new { e.Mayo, e.Diciembre, e.IdConcepto, e.IdEmpleado })
                    .HasName("ix_dta_index_PR_SUELDOS_Y_SALARIOS_DETALLE_7");

                entity.HasIndex(e => new { e.Mayo, e.Diciembre, e.IdEmpleado, e.IdConcepto })
                    .HasName("dta_index_PR_SUELDOS_Y_SALARIOS_DETALLE");

                entity.HasIndex(e => new { e.Noviembre, e.Febrero1, e.IdConcepto, e.IdEmpleado })
                    .HasName("ix_PR_SUELDOS_Y_SALARIOS_DETALLE");

                entity.HasIndex(e => new { e.Octubre, e.Enero1, e.IdConcepto, e.IdEmpleado })
                    .HasName("ix_PR_SUELDOS_Y_SALARIOS_DETALLE_7");

                entity.HasIndex(e => new { e.Abril, e.Junio, e.Octubre, e.IdEmpleado, e.IdConcepto, e.IdSueldoSalarioD })
                    .HasName("index_PR_SUELDOS_Y_SALARIOS_DETALLE_9");

                entity.HasIndex(e => new { e.Abril1, e.Junio1, e.Noviembre1, e.IdEmpleado, e.IdSueldoSalarioD, e.IdConcepto })
                    .HasName("index_PR_SUELDOS_Y_SALARIOS_DETALLE_11");

                entity.HasIndex(e => new { e.Enero1, e.Febrero1, e.Diciembre1, e.IdEmpleado, e.IdSueldoSalarioD, e.IdConcepto })
                    .HasName("index_PR_SUELDOS_Y_SALARIOS_DETALLE_10");

                entity.HasIndex(e => new { e.Febrero, e.Julio, e.Septiembre, e.IdEmpleado, e.IdSueldoSalarioD, e.IdConcepto })
                    .HasName("index_PR_SUELDOS_Y_SALARIOS_DETALLE_12");

                entity.HasIndex(e => new { e.Julio1, e.Agosto1, e.Septiembre1, e.IdEmpleado, e.IdConcepto, e.IdSueldoSalarioD })
                    .HasName("index_PR_SUELDOS_Y_SALARIOS_DETALLE_7");

                entity.HasIndex(e => new { e.Marzo, e.Agosto, e.Noviembre, e.IdEmpleado, e.IdConcepto, e.IdSueldoSalarioD })
                    .HasName("index_PR_SUELDOS_Y_SALARIOS_DETALLE_8");

                entity.HasIndex(e => new { e.Marzo1, e.Mayo1, e.Octubre1, e.IdEmpleado, e.IdSueldoSalarioD, e.IdConcepto })
                    .HasName("dta_index_PR_SUELDOS_Y_SALARIOS_DETALLE_");

                entity.HasIndex(e => new { e.Enero, e.Febrero, e.Marzo, e.Abril, e.Mayo, e.Junio, e.Julio, e.Agosto, e.Septiembre, e.Octubre, e.Noviembre, e.Diciembre, e.Enero1, e.Febrero1, e.IdEmpleado, e.IdSueldoSalarioD })
                    .HasName("dta_index_PR_SUELDOS_Y_SALARIOS_DETALLES");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdConceptoNavigation)
                    .WithMany(p => p.PrSueldosYSalariosDetalle)
                    .HasForeignKey(d => d.IdConcepto)
                    .HasConstraintName("FK_PR_SUELDOS_Y_SALARIOS_DETALLE_PR_PARAMETERIZACION_DEDUCCION_REMUNERACION_ID");

                entity.HasOne(d => d.IdEmpleadoNavigation)
                    .WithMany(p => p.PrSueldosYSalariosDetalle)
                    .HasForeignKey(d => d.IdEmpleado)
                    .HasConstraintName("FK_PR_SUELDOS_Y_SALARIOS_DETALLE_PR_EMPLEADOS1");
            });

            modelBuilder.Entity<PrTasaDeCambio>(entity =>
            {
                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.Simbolo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdTipoTasaNavigation)
                    .WithMany(p => p.PrTasaDeCambio)
                    .HasForeignKey(d => d.IdTipoTasa)
                    .HasConstraintName("FK_PR_TASA_DE_CAMBIO_PR_TIPO_TASA");
            });

            modelBuilder.Entity<PrTipoDeClase>(entity =>
            {
                entity.Property(e => e.TipoClase).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoFinca>(entity =>
            {
                entity.Property(e => e.TipoFinca).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoLibras>(entity =>
            {
                entity.HasKey(e => e.IdTipoLibra)
                    .HasName("PK_TIPO_LIBRAS");

                entity.Property(e => e.TipoLibra).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoMaterial>(entity =>
            {
                entity.Property(e => e.TipoMaterial).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoProceso>(entity =>
            {
                entity.Property(e => e.TipoProceso).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdTpCategoriaNavigation)
                    .WithMany(p => p.PrTipoProceso)
                    .HasForeignKey(d => d.IdTpCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PR_TIPO_PROCESO_PR_TIPO_PROCESO_CATEGORIA");
            });

            modelBuilder.Entity<PrTipoProcesoCategoria>(entity =>
            {
                entity.Property(e => e.Categoria).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoTasa>(entity =>
            {
                entity.Property(e => e.TipoTasa).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoUsuario>(entity =>
            {
                entity.HasKey(e => e.IdTipoUsuario)
                    .HasName("PK__TIPO_USUARIO");

                entity.Property(e => e.NombreTipoUsuario).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTipoValor>(entity =>
            {
                entity.HasKey(e => e.IdTipoValor)
                    .HasName("PK_TIPO_VALOR");

                entity.Property(e => e.NombreValor).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrTiposDePresupuestos>(entity =>
            {
                entity.HasKey(e => e.IdTipoPresupuesto)
                    .HasName("PK_TIPOS_DE_PRESUPUESTOS");

                entity.Property(e => e.Codigo).IsUnicode(false);

                entity.Property(e => e.TipoDePresupuesto).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrUnidadMedida>(entity =>
            {
                entity.HasKey(e => e.IdUnidadMedida)
                    .HasName("PK_UNIDAD_MEDIDA");

                entity.Property(e => e.NombreEquipo).IsUnicode(false);

                entity.Property(e => e.NombreUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrUsuarios>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("PK__USUARIOS");

                entity.Property(e => e.CodUsuario).IsUnicode(false);

                entity.Property(e => e.ContraseñaUsuario).IsUnicode(false);

                entity.Property(e => e.EmailUsuario).IsUnicode(false);

                entity.Property(e => e.NombreCompleto).IsUnicode(false);

                entity.Property(e => e.NombreUsuario).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<PrVCentrosDeCosto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PR_V_CENTROS_DE_COSTO");

                entity.Property(e => e.CentroDeCosto).IsUnicode(false);

                entity.Property(e => e.CodCentroDeCosto).IsUnicode(false);

                entity.Property(e => e.Empresa).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.NombreCentroDeCosto).IsUnicode(false);
            });

            modelBuilder.Entity<PrVEmpresas>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PR_V_EMPRESAS");

                entity.Property(e => e.CodEmpresa).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.NombreEmpresa).IsUnicode(false);
            });

            modelBuilder.Entity<PrValorBonificaciones>(entity =>
            {
                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdPresupuestoNavigation)
                    .WithMany(p => p.PrValorBonificaciones)
                    .HasForeignKey(d => d.IdPresupuesto)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PR_VALOR_BONIFICACIONES_PR_PRESUPUESTO_MAESTRO");
            });

            modelBuilder.Entity<TipoUbicaciones>(entity =>
            {
                entity.Property(e => e.TipoUbicacion).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}